.img-hover-effect {
    transition: transform 0.3s ease; 
}

.img-hover-effect:hover {
    transform: scale(1.05); 
}


.mulch-container {
    margin-left: 16%;
    margin-top: 10%;
}


@media  (min-width:  300px) and (max-width:600px ) {
    .mulch-container {
        margin-left: 4% !important;
        margin-top: 10%;
    }
    

    .img-fluid {
        width: 90% !important;
        margin-left: 0 !important;
    }

    .mulch-container .row .col-md-6 {
        margin-top: 20px;
    }
}


@media  (min-width:  600px) and (max-width:1100px ) {
    .mulch-container {
        margin-left: 0% ;
        margin-top: 10%;
    }
    

    .img-fluid {
        width: 100% !important;
        margin-left: 0 !important;
    }

    .mulch-container .row .col-md-6 {
        margin-top: 20px;
    }
}


.setter {
    margin-left: 13%;
  margin-top: 10%;
  width: 94%;
}


h2.text-center {
    font-size: 2rem; 
    margin-bottom: 20px;
}


@media (min-width:600px) and (max-width: 991px) {
    .setter {
        margin-left: -8%; 
        margin-top: 12%;
    }

    h2.text-center {
        font-size: 1.8rem;
        margin-bottom: 15px;
    }
}


@media (max-width: 767px) {
    .setter {
        margin-left: 0%; 
        margin-top: 12%;
    }

    
    h2.text-center {
        font-size: 1.5rem;
        margin-bottom: 10px;
        text-align: center;
    }


    form {
        padding: 0 10px; 
    }
    
   
    .card {
        margin-bottom: 30px;
    }

  
    .card-img-top {
        max-height: 60px; 
        width: 30%;
    }
}


/* Medium Devices: Small Navbar for 990px to 1350px */
@media (max-width: 1550px) and (min-width: 1100px){
    .setter {
        margin-left: 16%;
        margin-top: 10%;
        width: 90%;
    }

    h2.text-center {
        font-size: 1.5rem;
        margin-bottom: 10px;
        text-align: center;
    }


    form {
        padding: 0 10px; 
    }
    
   
    .card {
        margin-bottom: 30px;
    }

  
    .card-img-top {
        max-height: 60px; 
        width: 30%;
    }
}



  const generatePDF = (order) => {
    const doc = new jsPDF();

    // Add logo
    if (logo) {
      doc.addImage(logo, 'JPEG', 10, 10, 40, 20);
    }

    // Add heading and other details
    doc.setFontSize(20);
    doc.setFont('helvetica', 'bold');
    doc.text('INVOICE', 105, 20, { align: 'center' });

    // Draw horizontal line
    doc.line(10, 30, 200, 30);
    const formattedDate = order.shippingDate
      ? new Date(order.shippingDate).toLocaleDateString()
      : 'N/A';
    doc.setFontSize(10);
    doc.text(`Date: ${formattedDate}`, 190, 35, { align: 'right' });

    // Billing and shipping info
    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.text('Billing Information', 14, 45);
    doc.text('Shipping Information', 110, 45);
    doc.line(10, 48, 200, 48);

    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    if (profile) {
      doc.text(`Company: ${profile.companyName || 'N/A'}`, 14, 55);
      doc.text(`Email: ${profile.email || 'N/A'}`, 14, 60);
      doc.text(`Billing Address: ${profile.billAddress || 'N/A'}`, 14, 65);

      doc.text(`Shipping Address: ${profile.shipAddress || 'N/A'}`, 110, 55);
    }

    // Add order details table
    doc.autoTable({
      startY: 85,
      head: [
        ['Order ID', 'Vehicle Number', 'Product', 'Quantity (tons)', 'Price Per Ton', 'Subtotal', 'GST', 'Total Price'],
      ],
      body: [
        [
          order.orderId ? order.orderId._id : 'N/A',
          order.vehicleNumber || 'N/A',
          order.selectedProduct || 'N/A',
          `${order.quantity || 0} tons`,
          // Find the price of the selected product from the itemDetails array
          `${order.itemDetails?.find(item => item.name === order.selectedProduct)?.price.toFixed(2) || 0}`,
          `${order.subtotal?.toFixed(2) || 0}`,
          `${order.gst?.toFixed(2) || 0}`,
          `${order.totalPrice?.toFixed(2) || 0}`,
        ],
      ],
      
      theme: 'striped',
      styles: { fontSize: 9 },
    });

    const finalY = doc.lastAutoTable.finalY + 10;
    const totalAmountInWords = numberToWords(order.totalPrice || 0);
    doc.text(`Total Amount (in words): ${totalAmountInWords}`, 14, finalY);

    // Address Details Section
doc.setFontSize(12);
doc.setFont('helvetica');
const addressY = finalY + 15;
doc.text('Address Details', 14, addressY);
doc.setDrawColor(0, 0, 0);
doc.line(10, addressY + 3, 200, addressY + 3); // Underline

doc.setFontSize(10);
doc.setFont('helvetica', 'normal');

// "From" Section
doc.text('From:', 14, addressY + 10);
doc.text('VIKAH RUBBERS', 14, addressY + 15);
doc.text('Hyderabad', 14, addressY + 20);
doc.text('Dispatch From:', 14, addressY + 25);
doc.text('#406, 4th Floor, Patel Towers,', 14, addressY + 30);
doc.text('Above EasyBuy Beside Nagole RTO Office,', 14, addressY + 35);
doc.text('Nagole Hyderabad, Telangana-500035', 14, addressY + 40);
doc.text('Hyderabad.', 14, addressY + 45);

// Shipping Info Section
doc.setFont('helvetica', 'bold');
doc.text('Shipping Information', 110, addressY + 10);
doc.setFont('helvetica', 'normal');
doc.text('To:', 110, addressY + 15);

// Split the shipping address into multiple lines (assuming it could be long)
const shipAddress = profile?.shipAddress || 'N/A';
const shipAddressLines = shipAddress.split(','); // Split address by commas to create multiple lines
let shipAddressY = addressY + 20;
shipAddressLines.forEach((line, index) => {
  doc.text(line, 110, shipAddressY + (index * 5)); // Adjust line spacing
});


        // Terms and Conditions
        const termsY = addressY + 55;
        doc.setFont('helvetica', 'bold');
        doc.text('Terms and Conditions:', 14, termsY);
        doc.setDrawColor(0, 0, 0);
        doc.line(10, termsY + 3, 200, termsY + 3); // Underline
      
        doc.setFontSize(9);
        doc.setFont('helvetica', 'normal');
        doc.text(
          '1. The Seller shall not be liable to the Buyer for any loss or damage.',
          14,
          termsY + 10
        );
        doc.text(
          '2. The Seller warrants the product for one (1) year from the date of shipment.',
          14,
          termsY + 15
        );
        doc.text(
          '3. The purchase order will be interpreted as acceptance of this offer.',
          14,
          termsY + 20
        );

    // Save the PDF
    doc.save(`Invoice_${order._id}.pdf`);
  };

  

  const downloadOrderPDFs = async (orderId) => {
    const zip = new JSZip();
    
    // Filter the details for the specific Order ID
    const orderDetails = shippingDetails.filter(detail => detail.orderId._id === orderId);
    
    // Create an array of promises to generate PDFs
    const pdfPromises = orderDetails.map(async (detail) => {
      try {
        const pdfBlob = await generatePDF(detail); // Generate PDF blob for each detail
        zip.file(`Invoice_${detail._id}.pdf`, pdfBlob); // Add the PDF blob to the zip file
      } catch (error) {
        console.error(`Error generating PDF for order ${detail._id}:`, error);
      }
    });
  
    // Wait for all PDFs to be generated and added to the ZIP
    await Promise.all(pdfPromises);
  
    // After all PDFs are added to the ZIP, generate the ZIP file and trigger download
    try {
      const zipContent = await zip.generateAsync({ type: 'blob' });
      saveAs(zipContent, `Invoices_${orderId}.zip`); // Save the ZIP file
    } catch (error) {
      console.error("Error generating ZIP file:", error);
    }
  };



  router.get('/shippinguser', async (req, res) => {
  try {
    // Extract the authorization header
    const authHeader = req.headers.authorization;

    if (!authHeader) {
      return res.status(401).json({ message: 'Authorization header missing' });
    }

    // Extract and verify the token
    const token = authHeader.split(' ')[1];
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const userId = decoded.user.id; // Assuming the token contains `user.id`

    // Fetch shipping details specific to the user
    const shippingDetails = await Shipping.find({ userId })
      .populate('orderId') // Populate the Order reference
      .populate('userId', 'email') // Populate the email field from User
      .select('orderId vehicleNumber selectedProduct quantity subtotal gst totalPrice shippingDate userId email itemDetails pdf');

    if (!shippingDetails || shippingDetails.length === 0) {
      return res.status(404).json({ message: 'No shipping details found for this user' });
    }

    // Return the shipping details
    return res.status(200).json(shippingDetails);
  } catch (error) {
    console.error('Error fetching shipping details:', error);
    return res.status(500).json({ message: 'Internal Server Error' });
  }
});









  useEffect(() => {
    const fetchProfile = async () => {
      try {
        const token = localStorage.getItem('token');
        const response = await axios.get(`${process.env.REACT_APP_API_URL}/business-profile`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        if (response.data.profileExists) {
          setProfile(response.data.businessProfile);
        }
      } catch (err) {
        console.error('Error fetching business profile:', err);
      }
    };

    fetchProfile();
  }, []);

  const numberToWords = (num) => {
    if (num === 0) return 'zero rupees only';
  
    const a = [
      '', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve',
      'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen',
    ];
    const b = ['', '', 'twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety'];
  
    const numToWords = (n) => {
      if (n < 20) return a[n];
      if (n < 100) return b[Math.floor(n / 10)] + (n % 10 ? ' ' + a[n % 10] : '');
      if (n < 1000) return a[Math.floor(n / 100)] + ' hundred' + (n % 100 ? ' and ' + numToWords(n % 100) : '');
      return '';
    };
  
    const units = ['crore', 'lakh', 'thousand', 'hundred'];
    const divisors = [10000000, 100000, 1000, 100];
  
    let result = '';
    let wholePart = Math.floor(num);
    let fractionalPart = Math.round((num - wholePart) * 100); // Convert fractional part to paise
  
    // Convert the whole part
    for (let i = 0; i < divisors.length; i++) {
      const quotient = Math.floor(wholePart / divisors[i]);
      wholePart %= divisors[i];
      if (quotient > 0) {
        result += numToWords(quotient) + ' ' + units[i] + ' ';
      }
    }
  
    // Handle any remaining whole part
    if (wholePart > 0) {
      result += numToWords(wholePart);
    }
  
    // Add fractional part (paise)
    if (fractionalPart > 0) {
      result += ` and ${numToWords(fractionalPart)} paise`;
    }
  
    return result.trim() + ' rupees only';
  };
  const generatePDF = (order) => {
    const doc = new jsPDF();

    // Add logo
    if (logo) {
      doc.addImage(logo, 'JPEG', 10, 10, 40, 20);
    }

    // Add heading and other details
    doc.setFontSize(20);
    doc.setFont('helvetica', 'bold');
    doc.text('INVOICE', 105, 20, { align: 'center' });

    // Draw horizontal line
    doc.line(10, 30, 200, 30);
    const formattedDate = order.shippingDate
      ? new Date(order.shippingDate).toLocaleDateString()
      : 'N/A';
    doc.setFontSize(10);
    doc.text(`Date: ${formattedDate}`, 190, 35, { align: 'right' });

    // Billing and shipping info
    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.text('Billing Information', 14, 45);
    doc.text('Shipping Information', 110, 45);
    doc.line(10, 48, 200, 48);

    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    if (profile) {
      doc.text(`Company: ${profile.companyName || 'N/A'}`, 14, 55);
      doc.text(`Email: ${profile.email || 'N/A'}`, 14, 60);
      doc.text(`Billing Address: ${profile.billAddress || 'N/A'}`, 14, 65);

      doc.text(`Shipping Address: ${profile.shipAddress || 'N/A'}`, 110, 55);
    }

    // Add order details table
    doc.autoTable({
      startY: 85,
      head: [
        ['Order ID', 'Vehicle Number', 'Product', 'Quantity (tons)', 'Price Per Ton', 'Subtotal', 'GST', 'Total Price'],
      ],
      body: [
        [
          order.orderId ? order.orderId._id : 'N/A',
          order.vehicleNumber || 'N/A',
          order.selectedProduct || 'N/A',
          `${order.quantity || 0} tons`,
          // Find the price of the selected product from the itemDetails array
          `${order.itemDetails?.find(item => item.name === order.selectedProduct)?.price.toFixed(2) || 0}`,
          `${order.subtotal?.toFixed(2) || 0}`,
          `${order.gst?.toFixed(2) || 0}`,
          `${order.totalPrice?.toFixed(2) || 0}`,
        ],
      ],
      
      theme: 'striped',
      styles: { fontSize: 9 },
    });

    const finalY = doc.lastAutoTable.finalY + 10;
    const totalAmountInWords = numberToWords(order.totalPrice || 0);
    doc.text(`Total Amount (in words): ${totalAmountInWords}`, 14, finalY);

    // Address Details Section
doc.setFontSize(12);
doc.setFont('helvetica');
const addressY = finalY + 15;
doc.text('Address Details', 14, addressY);
doc.setDrawColor(0, 0, 0);
doc.line(10, addressY + 3, 200, addressY + 3); // Underline

doc.setFontSize(10);
doc.setFont('helvetica', 'normal');

// "From" Section
doc.text('From:', 14, addressY + 10);
doc.text('VIKAH RUBBERS', 14, addressY + 15);
doc.text('Hyderabad', 14, addressY + 20);
doc.text('Dispatch From:', 14, addressY + 25);
doc.text('#406, 4th Floor, Patel Towers,', 14, addressY + 30);
doc.text('Above EasyBuy Beside Nagole RTO Office,', 14, addressY + 35);
doc.text('Nagole Hyderabad, Telangana-500035', 14, addressY + 40);
doc.text('Hyderabad.', 14, addressY + 45);

// Shipping Info Section
doc.setFont('helvetica', 'bold');
doc.text('Shipping Information', 110, addressY + 10);
doc.setFont('helvetica', 'normal');
doc.text('To:', 110, addressY + 15);

// Split the shipping address into multiple lines (assuming it could be long)
const shipAddress = profile?.shipAddress || 'N/A';
const shipAddressLines = shipAddress.split(','); // Split address by commas to create multiple lines
let shipAddressY = addressY + 20;
shipAddressLines.forEach((line, index) => {
  doc.text(line, 110, shipAddressY + (index * 5)); // Adjust line spacing
});


        // Terms and Conditions
        const termsY = addressY + 55;
        doc.setFont('helvetica', 'bold');
        doc.text('Terms and Conditions:', 14, termsY);
        doc.setDrawColor(0, 0, 0);
        doc.line(10, termsY + 3, 200, termsY + 3); // Underline
      
        doc.setFontSize(9);
        doc.setFont('helvetica', 'normal');
        doc.text(
          '1. The Seller shall not be liable to the Buyer for any loss or damage.',
          14,
          termsY + 10
        );
        doc.text(
          '2. The Seller warrants the product for one (1) year from the date of shipment.',
          14,
          termsY + 15
        );
        doc.text(
          '3. The purchase order will be interpreted as acceptance of this offer.',
          14,
          termsY + 20
        );

    // Save the PDF
    doc.save(`Invoice_${order._id}.pdf`);
  };
